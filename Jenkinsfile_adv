pipeline {
  agent { label 'master' }

  environment {
    RCLONE_BASE      = 'irp:General/releases'
    DEST_FOLDER      = "${env.HOME}/workspace/NewVersion"
    REMOTE_TARGET    = 'C:\\Jenkins\\NewVersion'
    WORKSPACE_TARGET = "C:/Jenkins/workspace"
    REMOTE_USER      = 'dyno'       // overridden in Environment stage if needed
    REQUIREMENTS     = 'requirements.txt'
  }

  stages {

    stage('Environment') {
      steps {
        script {
          switch (env.DEVICE) {
            case 'UPP':
              env.REMOTE_IP    = '192.168.10.31'
              env.REMOTE_USER  = 'dyno'
              env.MAIN_VER_DIR = 'HD_Gen2/upp'
              env.REQUIREMENTS = 'requirements.txt'
              break
            case 'NewGen':
              env.REMOTE_IP    = '192.168.10.80'
              env.REMOTE_USER  = 'dyno'
              env.MAIN_VER_DIR = 'dynamic 6/newGen'   // contains space
              env.REQUIREMENTS = 'requirements.txt'
              break
            default:
              error "DEVICE not set or unrecognized. Set DEVICE to 'UPP' or 'NewGen'."
          }
          echo "Using remote ${env.REMOTE_USER}@${env.REMOTE_IP}, firmware dir: ${env.MAIN_VER_DIR}"
        }
      }
    }

    stage('Clone Project on Remote Windows') {
      steps {
        sh """
          echo "üöÄ Running remote clone + setup (PowerShell via stdin)..."

          ssh ${REMOTE_USER}@${REMOTE_IP} powershell -NoProfile -Command - <<'PS'
if (-not (Test-Path 'C:\\Jenkins\\workspace')) {
  New-Item -ItemType Directory -Path 'C:\\Jenkins\\workspace' -Force | Out-Null
}

if (-not (Test-Path 'C:\\Jenkins\\workspace\\Auto_UDS')) {
  git clone https://github.com/IRPSystems/Auto_UDS.git 'C:\\Jenkins\\workspace\\Auto_UDS'
} else {
  Write-Host 'Repo exists, pulling latest...'
  Set-Location 'C:\\Jenkins\\workspace\\Auto_UDS'
  git pull
}

Set-Location 'C:\\Jenkins\\workspace\\Auto_UDS'

# Temporarily disabled:
if (Test-Path 'venv') { Remove-Item -Recurse -Force 'venv' }
python -m venv venv
#& 'venv\\Scripts\\pip.exe' install -r '${REQUIREMENTS}'
#& 'venv\\Scripts\\pip.exe' freeze | Tee-Object -FilePath 'freeze.txt'
PS
        """
      }
    }

    stage('Find Latest Firmware Folder') {
      steps {
        script {
          def latestFolder = sh(
            script: """
              rclone lsd "${RCLONE_BASE}/${MAIN_VER_DIR}" | sort -k2,3 | tail -n1 | awk '{\$1=\$2=\$3=\$4=""; print \$0}' | sed 's/^ *//'
            """,
            returnStdout: true
          ).trim()

          if (!latestFolder) {
            error "‚ùå Could not find the latest folder in ${RCLONE_BASE}/${MAIN_VER_DIR}"
          }
          echo "‚úÖ Latest firmware folder: ${latestFolder}"
          env.LATEST_FOLDER = latestFolder
        }
      }
    }

   stage('Copy Latest Firmware') {
  steps {
    // 1) Local prep & copy from rclone
    sh """
      echo "üßπ Cleaning destination folder: ${DEST_FOLDER}"
      #rm -rf "${DEST_FOLDER}/${LATEST_FOLDER}"
      rm -rf "${DEST_FOLDER}"
      mkdir -p "${DEST_FOLDER}"

      echo "üì¶ Copying from: ${RCLONE_BASE}/${MAIN_VER_DIR}/${LATEST_FOLDER}/"
      rclone copy "${RCLONE_BASE}/${MAIN_VER_DIR}/${LATEST_FOLDER}/" "${DEST_FOLDER}/${LATEST_FOLDER}"
    """

    // 2) Delete remote folder completely and recreate it EMPTY (robust), then verify
    sh """
      echo "üñ•Ô∏è Deleting and recreating remote NewVersion folder on ${REMOTE_USER}@${REMOTE_IP}..."
      ssh ${REMOTE_USER}@${REMOTE_IP} powershell -NoProfile -Command - <<'PS'
\$root = 'C:\\Jenkins\\NewVersion'
Write-Host "‚û°Ô∏è Target:" \$root

# Ensure parent exists
\$parent = Split-Path -Parent \$root
if (-not (Test-Path \$parent)) { New-Item -ItemType Directory -Path \$parent -Force | Out-Null }

# Create root if missing
if (-not (Test-Path \$root)) { New-Item -ItemType Directory -Path \$root -Force | Out-Null }

# Mirror an EMPTY temp folder to root (reliably empties deep trees)
\$temp = Join-Path \$env:TEMP ([guid]::NewGuid().ToString())
New-Item -ItemType Directory -Path \$temp -Force | Out-Null
robocopy \$temp \$root /MIR /NFL /NDL /NJH /NJS /NP | Out-Null
\$rc = \$LASTEXITCODE
Remove-Item -Recurse -Force \$temp -ErrorAction SilentlyContinue

# Fallback if robocopy indicates failure (>7)
if (\$rc -gt 7) {
  Write-Host "Robocopy exit code \$rc; attempting PowerShell fallback..."
  Get-ChildItem -LiteralPath \$root -Force | Remove-Item -Recurse -Force -ErrorAction Continue
}

# (Re)create the root (robocopy /MIR keeps it, but ensure presence)
if (-not (Test-Path \$root)) { New-Item -ItemType Directory -Path \$root -Force | Out-Null }

# Verify empty; fail if not
\$items = Get-ChildItem -LiteralPath \$root -Force
if (\$items.Count -gt 0) {
  Write-Host '‚ùå Folder not empty after cleanup:'
  \$items | Select-Object Name,Mode,Length | Format-Table -AutoSize
  exit 1
} else {
  Write-Host '‚úÖ Folder is empty.'
}
PS
    """

    // 3) Push the freshly copied firmware to the slave
    sh """
      echo "üì§ Sending files to remote host"
      scp -r "${DEST_FOLDER}/${LATEST_FOLDER}" ${REMOTE_USER}@${REMOTE_IP}:"C:/Jenkins/NewVersion"
      ssh ${REMOTE_USER}@${REMOTE_IP} "cmd /c dir C:\\Jenkins\\NewVersion"

    """
  }
}
    stage('Done') {
      steps {
        echo "üéâ Firmware files copied successfully to: ${REMOTE_TARGET} on ${REMOTE_IP}"
      }
    }
  }
}
